//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\jdvorak\Dropbox\Skola\FJP\HappyLanguage\Happy_language\Grammar.g4 by ANTLR 4.5.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Happy_language {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.3")]
[System.CLSCompliant(false)]
public partial class GrammarLexer : Lexer {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, Return=11, Comment=12, Line_comment=13, Semi=14, Assign=15, Bracket_left=16, 
		Bracket_right=17, Data_type_void=18, Data_type_bool=19, Data_type_double=20, 
		Data_type_int=21, Function_def=22, Const=23, If=24, Else=25, Operator_condition=26, 
		Logical_operator=27, Start_prog=28, Main_name=29, Bool=30, Start_blok=31, 
		End_blok=32, Int=33, Double=34, Identifier=35, WS=36;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "Return", "Comment", "Line_comment", "Semi", "Assign", "Bracket_left", 
		"Bracket_right", "Data_type_void", "Data_type_bool", "Data_type_double", 
		"Data_type_int", "Function_def", "Const", "If", "Else", "Operator_condition", 
		"Logical_operator", "Start_prog", "Main_name", "Bool", "Start_blok", "End_blok", 
		"Int", "Double", "Identifier", "WS"
	};


	public GrammarLexer(ICharStream input)
		: base(input)
	{
		_interp = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, "'ass'", "','", "'while'", "'for'", "'+'", "'-'", "'/'", "'*'", 
		"'('", "')'", "'ret'", null, null, "';)'", "':='", "'(:'", "':)'", "':V'", 
		"':B'", "':D'", "':I'", "'def'", "'const'", "'if'", "'else'", null, null, 
		"'happy_start'", "'mainSmile'", null, "'{:'", "':}'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, "Return", 
		"Comment", "Line_comment", "Semi", "Assign", "Bracket_left", "Bracket_right", 
		"Data_type_void", "Data_type_bool", "Data_type_double", "Data_type_int", 
		"Function_def", "Const", "If", "Else", "Operator_condition", "Logical_operator", 
		"Start_prog", "Main_name", "Bool", "Start_blok", "End_blok", "Int", "Double", 
		"Identifier", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Grammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x2&\x10F\b\x1\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x3\x2\x3\x2\x3\x2\x3\x2\x3\x3\x3\x3"+
		"\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3\x6\x3"+
		"\x6\x3\a\x3\a\x3\b\x3\b\x3\t\x3\t\x3\n\x3\n\x3\v\x3\v\x3\f\x3\f\x3\f\x3"+
		"\f\x3\r\x3\r\x3\r\x3\r\a\rp\n\r\f\r\xE\rs\v\r\x3\r\x3\r\x3\r\x3\r\x3\r"+
		"\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\a\xE\x7F\n\xE\f\xE\xE\xE\x82\v\xE\x3\xE"+
		"\x3\xE\x3\xF\x3\xF\x3\xF\x3\x10\x3\x10\x3\x10\x3\x11\x3\x11\x3\x11\x3"+
		"\x12\x3\x12\x3\x12\x3\x13\x3\x13\x3\x13\x3\x14\x3\x14\x3\x14\x3\x15\x3"+
		"\x15\x3\x15\x3\x16\x3\x16\x3\x16\x3\x17\x3\x17\x3\x17\x3\x17\x3\x18\x3"+
		"\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x19\x3\x19\x3\x19\x3\x1A\x3\x1A\x3"+
		"\x1A\x3\x1A\x3\x1A\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3"+
		"\x1B\x3\x1B\x5\x1B\xB9\n\x1B\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x5\x1C\xBF\n"+
		"\x1C\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3"+
		"\x1D\x3\x1D\x3\x1D\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3"+
		"\x1E\x3\x1E\x3\x1E\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3"+
		"\x1F\x3\x1F\x5\x1F\xE0\n\x1F\x3 \x3 \x3 \x3!\x3!\x3!\x3\"\x5\"\xE9\n\""+
		"\x3\"\x6\"\xEC\n\"\r\"\xE\"\xED\x3#\x5#\xF1\n#\x3#\x6#\xF4\n#\r#\xE#\xF5"+
		"\x3#\x3#\x6#\xFA\n#\r#\xE#\xFB\x3$\x6$\xFF\n$\r$\xE$\x100\x3$\a$\x104"+
		"\n$\f$\xE$\x107\v$\x3%\x6%\x10A\n%\r%\xE%\x10B\x3%\x3%\x3q\x2\x2&\x3\x2"+
		"\x3\x5\x2\x4\a\x2\x5\t\x2\x6\v\x2\a\r\x2\b\xF\x2\t\x11\x2\n\x13\x2\v\x15"+
		"\x2\f\x17\x2\r\x19\x2\xE\x1B\x2\xF\x1D\x2\x10\x1F\x2\x11!\x2\x12#\x2\x13"+
		"%\x2\x14\'\x2\x15)\x2\x16+\x2\x17-\x2\x18/\x2\x19\x31\x2\x1A\x33\x2\x1B"+
		"\x35\x2\x1C\x37\x2\x1D\x39\x2\x1E;\x2\x1F=\x2 ?\x2!\x41\x2\"\x43\x2#\x45"+
		"\x2$G\x2%I\x2&\x3\x2\t\x4\x2\f\f\xF\xF\x4\x2>>@@\x4\x2--//\x3\x2\x32;"+
		"\x4\x2\x43\\\x63|\x5\x2\x32;\x43\\\x63|\x5\x2\v\f\xF\xF\"\"\x11E\x2\x3"+
		"\x3\x2\x2\x2\x2\x5\x3\x2\x2\x2\x2\a\x3\x2\x2\x2\x2\t\x3\x2\x2\x2\x2\v"+
		"\x3\x2\x2\x2\x2\r\x3\x2\x2\x2\x2\xF\x3\x2\x2\x2\x2\x11\x3\x2\x2\x2\x2"+
		"\x13\x3\x2\x2\x2\x2\x15\x3\x2\x2\x2\x2\x17\x3\x2\x2\x2\x2\x19\x3\x2\x2"+
		"\x2\x2\x1B\x3\x2\x2\x2\x2\x1D\x3\x2\x2\x2\x2\x1F\x3\x2\x2\x2\x2!\x3\x2"+
		"\x2\x2\x2#\x3\x2\x2\x2\x2%\x3\x2\x2\x2\x2\'\x3\x2\x2\x2\x2)\x3\x2\x2\x2"+
		"\x2+\x3\x2\x2\x2\x2-\x3\x2\x2\x2\x2/\x3\x2\x2\x2\x2\x31\x3\x2\x2\x2\x2"+
		"\x33\x3\x2\x2\x2\x2\x35\x3\x2\x2\x2\x2\x37\x3\x2\x2\x2\x2\x39\x3\x2\x2"+
		"\x2\x2;\x3\x2\x2\x2\x2=\x3\x2\x2\x2\x2?\x3\x2\x2\x2\x2\x41\x3\x2\x2\x2"+
		"\x2\x43\x3\x2\x2\x2\x2\x45\x3\x2\x2\x2\x2G\x3\x2\x2\x2\x2I\x3\x2\x2\x2"+
		"\x3K\x3\x2\x2\x2\x5O\x3\x2\x2\x2\aQ\x3\x2\x2\x2\tW\x3\x2\x2\x2\v[\x3\x2"+
		"\x2\x2\r]\x3\x2\x2\x2\xF_\x3\x2\x2\x2\x11\x61\x3\x2\x2\x2\x13\x63\x3\x2"+
		"\x2\x2\x15\x65\x3\x2\x2\x2\x17g\x3\x2\x2\x2\x19k\x3\x2\x2\x2\x1By\x3\x2"+
		"\x2\x2\x1D\x85\x3\x2\x2\x2\x1F\x88\x3\x2\x2\x2!\x8B\x3\x2\x2\x2#\x8E\x3"+
		"\x2\x2\x2%\x91\x3\x2\x2\x2\'\x94\x3\x2\x2\x2)\x97\x3\x2\x2\x2+\x9A\x3"+
		"\x2\x2\x2-\x9D\x3\x2\x2\x2/\xA1\x3\x2\x2\x2\x31\xA7\x3\x2\x2\x2\x33\xAA"+
		"\x3\x2\x2\x2\x35\xB8\x3\x2\x2\x2\x37\xBE\x3\x2\x2\x2\x39\xC0\x3\x2\x2"+
		"\x2;\xCC\x3\x2\x2\x2=\xDF\x3\x2\x2\x2?\xE1\x3\x2\x2\x2\x41\xE4\x3\x2\x2"+
		"\x2\x43\xE8\x3\x2\x2\x2\x45\xF0\x3\x2\x2\x2G\xFE\x3\x2\x2\x2I\x109\x3"+
		"\x2\x2\x2KL\a\x63\x2\x2LM\au\x2\x2MN\au\x2\x2N\x4\x3\x2\x2\x2OP\a.\x2"+
		"\x2P\x6\x3\x2\x2\x2QR\ay\x2\x2RS\aj\x2\x2ST\ak\x2\x2TU\an\x2\x2UV\ag\x2"+
		"\x2V\b\x3\x2\x2\x2WX\ah\x2\x2XY\aq\x2\x2YZ\at\x2\x2Z\n\x3\x2\x2\x2[\\"+
		"\a-\x2\x2\\\f\x3\x2\x2\x2]^\a/\x2\x2^\xE\x3\x2\x2\x2_`\a\x31\x2\x2`\x10"+
		"\x3\x2\x2\x2\x61\x62\a,\x2\x2\x62\x12\x3\x2\x2\x2\x63\x64\a*\x2\x2\x64"+
		"\x14\x3\x2\x2\x2\x65\x66\a+\x2\x2\x66\x16\x3\x2\x2\x2gh\at\x2\x2hi\ag"+
		"\x2\x2ij\av\x2\x2j\x18\x3\x2\x2\x2kl\a<\x2\x2lm\a,\x2\x2mq\x3\x2\x2\x2"+
		"np\v\x2\x2\x2on\x3\x2\x2\x2ps\x3\x2\x2\x2qr\x3\x2\x2\x2qo\x3\x2\x2\x2"+
		"rt\x3\x2\x2\x2sq\x3\x2\x2\x2tu\a,\x2\x2uv\a<\x2\x2vw\x3\x2\x2\x2wx\b\r"+
		"\x2\x2x\x1A\x3\x2\x2\x2yz\a<\x2\x2z{\a,\x2\x2{|\a,\x2\x2|\x80\x3\x2\x2"+
		"\x2}\x7F\n\x2\x2\x2~}\x3\x2\x2\x2\x7F\x82\x3\x2\x2\x2\x80~\x3\x2\x2\x2"+
		"\x80\x81\x3\x2\x2\x2\x81\x83\x3\x2\x2\x2\x82\x80\x3\x2\x2\x2\x83\x84\b"+
		"\xE\x2\x2\x84\x1C\x3\x2\x2\x2\x85\x86\a=\x2\x2\x86\x87\a+\x2\x2\x87\x1E"+
		"\x3\x2\x2\x2\x88\x89\a<\x2\x2\x89\x8A\a?\x2\x2\x8A \x3\x2\x2\x2\x8B\x8C"+
		"\a*\x2\x2\x8C\x8D\a<\x2\x2\x8D\"\x3\x2\x2\x2\x8E\x8F\a<\x2\x2\x8F\x90"+
		"\a+\x2\x2\x90$\x3\x2\x2\x2\x91\x92\a<\x2\x2\x92\x93\aX\x2\x2\x93&\x3\x2"+
		"\x2\x2\x94\x95\a<\x2\x2\x95\x96\a\x44\x2\x2\x96(\x3\x2\x2\x2\x97\x98\a"+
		"<\x2\x2\x98\x99\a\x46\x2\x2\x99*\x3\x2\x2\x2\x9A\x9B\a<\x2\x2\x9B\x9C"+
		"\aK\x2\x2\x9C,\x3\x2\x2\x2\x9D\x9E\a\x66\x2\x2\x9E\x9F\ag\x2\x2\x9F\xA0"+
		"\ah\x2\x2\xA0.\x3\x2\x2\x2\xA1\xA2\a\x65\x2\x2\xA2\xA3\aq\x2\x2\xA3\xA4"+
		"\ap\x2\x2\xA4\xA5\au\x2\x2\xA5\xA6\av\x2\x2\xA6\x30\x3\x2\x2\x2\xA7\xA8"+
		"\ak\x2\x2\xA8\xA9\ah\x2\x2\xA9\x32\x3\x2\x2\x2\xAA\xAB\ag\x2\x2\xAB\xAC"+
		"\an\x2\x2\xAC\xAD\au\x2\x2\xAD\xAE\ag\x2\x2\xAE\x34\x3\x2\x2\x2\xAF\xB0"+
		"\a?\x2\x2\xB0\xB9\a?\x2\x2\xB1\xB2\a#\x2\x2\xB2\xB9\a?\x2\x2\xB3\xB4\a"+
		">\x2\x2\xB4\xB9\a?\x2\x2\xB5\xB6\a@\x2\x2\xB6\xB9\a?\x2\x2\xB7\xB9\t\x3"+
		"\x2\x2\xB8\xAF\x3\x2\x2\x2\xB8\xB1\x3\x2\x2\x2\xB8\xB3\x3\x2\x2\x2\xB8"+
		"\xB5\x3\x2\x2\x2\xB8\xB7\x3\x2\x2\x2\xB9\x36\x3\x2\x2\x2\xBA\xBB\a(\x2"+
		"\x2\xBB\xBF\a(\x2\x2\xBC\xBD\a~\x2\x2\xBD\xBF\a~\x2\x2\xBE\xBA\x3\x2\x2"+
		"\x2\xBE\xBC\x3\x2\x2\x2\xBF\x38\x3\x2\x2\x2\xC0\xC1\aj\x2\x2\xC1\xC2\a"+
		"\x63\x2\x2\xC2\xC3\ar\x2\x2\xC3\xC4\ar\x2\x2\xC4\xC5\a{\x2\x2\xC5\xC6"+
		"\a\x61\x2\x2\xC6\xC7\au\x2\x2\xC7\xC8\av\x2\x2\xC8\xC9\a\x63\x2\x2\xC9"+
		"\xCA\at\x2\x2\xCA\xCB\av\x2\x2\xCB:\x3\x2\x2\x2\xCC\xCD\ao\x2\x2\xCD\xCE"+
		"\a\x63\x2\x2\xCE\xCF\ak\x2\x2\xCF\xD0\ap\x2\x2\xD0\xD1\aU\x2\x2\xD1\xD2"+
		"\ao\x2\x2\xD2\xD3\ak\x2\x2\xD3\xD4\an\x2\x2\xD4\xD5\ag\x2\x2\xD5<\x3\x2"+
		"\x2\x2\xD6\xD7\av\x2\x2\xD7\xD8\at\x2\x2\xD8\xD9\aw\x2\x2\xD9\xE0\ag\x2"+
		"\x2\xDA\xDB\ah\x2\x2\xDB\xDC\a\x63\x2\x2\xDC\xDD\an\x2\x2\xDD\xDE\au\x2"+
		"\x2\xDE\xE0\ag\x2\x2\xDF\xD6\x3\x2\x2\x2\xDF\xDA\x3\x2\x2\x2\xE0>\x3\x2"+
		"\x2\x2\xE1\xE2\a}\x2\x2\xE2\xE3\a<\x2\x2\xE3@\x3\x2\x2\x2\xE4\xE5\a<\x2"+
		"\x2\xE5\xE6\a\x7F\x2\x2\xE6\x42\x3\x2\x2\x2\xE7\xE9\t\x4\x2\x2\xE8\xE7"+
		"\x3\x2\x2\x2\xE8\xE9\x3\x2\x2\x2\xE9\xEB\x3\x2\x2\x2\xEA\xEC\t\x5\x2\x2"+
		"\xEB\xEA\x3\x2\x2\x2\xEC\xED\x3\x2\x2\x2\xED\xEB\x3\x2\x2\x2\xED\xEE\x3"+
		"\x2\x2\x2\xEE\x44\x3\x2\x2\x2\xEF\xF1\t\x4\x2\x2\xF0\xEF\x3\x2\x2\x2\xF0"+
		"\xF1\x3\x2\x2\x2\xF1\xF3\x3\x2\x2\x2\xF2\xF4\t\x5\x2\x2\xF3\xF2\x3\x2"+
		"\x2\x2\xF4\xF5\x3\x2\x2\x2\xF5\xF3\x3\x2\x2\x2\xF5\xF6\x3\x2\x2\x2\xF6"+
		"\xF7\x3\x2\x2\x2\xF7\xF9\a\x30\x2\x2\xF8\xFA\t\x5\x2\x2\xF9\xF8\x3\x2"+
		"\x2\x2\xFA\xFB\x3\x2\x2\x2\xFB\xF9\x3\x2\x2\x2\xFB\xFC\x3\x2\x2\x2\xFC"+
		"\x46\x3\x2\x2\x2\xFD\xFF\t\x6\x2\x2\xFE\xFD\x3\x2\x2\x2\xFF\x100\x3\x2"+
		"\x2\x2\x100\xFE\x3\x2\x2\x2\x100\x101\x3\x2\x2\x2\x101\x105\x3\x2\x2\x2"+
		"\x102\x104\t\a\x2\x2\x103\x102\x3\x2\x2\x2\x104\x107\x3\x2\x2\x2\x105"+
		"\x103\x3\x2\x2\x2\x105\x106\x3\x2\x2\x2\x106H\x3\x2\x2\x2\x107\x105\x3"+
		"\x2\x2\x2\x108\x10A\t\b\x2\x2\x109\x108\x3\x2\x2\x2\x10A\x10B\x3\x2\x2"+
		"\x2\x10B\x109\x3\x2\x2\x2\x10B\x10C\x3\x2\x2\x2\x10C\x10D\x3\x2\x2\x2"+
		"\x10D\x10E\b%\x3\x2\x10EJ\x3\x2\x2\x2\x10\x2q\x80\xB8\xBE\xDF\xE8\xED"+
		"\xF0\xF5\xFB\x100\x105\x10B\x4\b\x2\x2\x2\x3\x2";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Happy_language
