//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Jan\Desktop\Happy_language\Happy_language\Grammar.g4 by ANTLR 4.5.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Happy_language {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.3")]
[System.CLSCompliant(false)]
public partial class GrammarLexer : Lexer {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, Return=13, Comment=14, Line_comment=15, Semi=16, 
		Assign=17, Bracket_left=18, Bracket_right=19, Data_type_void=20, Data_type_bool=21, 
		Data_type_double=22, Data_type_int=23, Function_def=24, Const=25, If=26, 
		Else=27, Operator_condition=28, Start_prog=29, Main_name=30, Bool=31, 
		Start_blok=32, End_blok=33, Int=34, Double=35, Identifier=36, WS=37;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "Return", "Comment", "Line_comment", "Semi", 
		"Assign", "Bracket_left", "Bracket_right", "Data_type_void", "Data_type_bool", 
		"Data_type_double", "Data_type_int", "Function_def", "Const", "If", "Else", 
		"Operator_condition", "Start_prog", "Main_name", "Bool", "Start_blok", 
		"End_blok", "Int", "Double", "Identifier", "WS"
	};


	public GrammarLexer(ICharStream input)
		: base(input)
	{
		_interp = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, "'ass'", "','", "'while'", "'for'", "'+'", "'-'", "'/'", "'*'", 
		"'('", "')'", "'||'", "'&&'", "'ret'", null, null, "';)'", "':='", "'(:'", 
		"':)'", "':V'", "':B'", "':D'", "':I'", "'def'", "'const'", "'if'", "'else'", 
		null, "'happy_start'", "'mainSmile'", null, "'{:'", "':}'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, "Return", "Comment", "Line_comment", "Semi", "Assign", "Bracket_left", 
		"Bracket_right", "Data_type_void", "Data_type_bool", "Data_type_double", 
		"Data_type_int", "Function_def", "Const", "If", "Else", "Operator_condition", 
		"Start_prog", "Main_name", "Bool", "Start_blok", "End_blok", "Int", "Double", 
		"Identifier", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Grammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x2\'\x111\b\x1\x4"+
		"\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b"+
		"\x4\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4"+
		"\x10\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15"+
		"\t\x15\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A"+
		"\x4\x1B\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 "+
		"\t \x4!\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x3\x2\x3\x2\x3\x2\x3\x2"+
		"\x3\x3\x3\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5\x3"+
		"\x5\x3\x6\x3\x6\x3\a\x3\a\x3\b\x3\b\x3\t\x3\t\x3\n\x3\n\x3\v\x3\v\x3\f"+
		"\x3\f\x3\f\x3\r\x3\r\x3\r\x3\xE\x3\xE\x3\xE\x3\xE\x3\xF\x3\xF\x3\xF\x3"+
		"\xF\a\xFx\n\xF\f\xF\xE\xF{\v\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\x10\x3"+
		"\x10\x3\x10\x3\x10\x3\x10\a\x10\x87\n\x10\f\x10\xE\x10\x8A\v\x10\x3\x10"+
		"\x3\x10\x3\x11\x3\x11\x3\x11\x3\x12\x3\x12\x3\x12\x3\x13\x3\x13\x3\x13"+
		"\x3\x14\x3\x14\x3\x14\x3\x15\x3\x15\x3\x15\x3\x16\x3\x16\x3\x16\x3\x17"+
		"\x3\x17\x3\x17\x3\x18\x3\x18\x3\x18\x3\x19\x3\x19\x3\x19\x3\x19\x3\x1A"+
		"\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1B\x3\x1B\x3\x1B\x3\x1C\x3\x1C"+
		"\x3\x1C\x3\x1C\x3\x1C\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D"+
		"\x3\x1D\x3\x1D\x5\x1D\xC1\n\x1D\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3"+
		"\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1F\x3\x1F\x3\x1F\x3"+
		"\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3 \x3 \x3 \x3 \x3 \x3"+
		" \x3 \x3 \x3 \x5 \xE2\n \x3!\x3!\x3!\x3\"\x3\"\x3\"\x3#\x5#\xEB\n#\x3"+
		"#\x6#\xEE\n#\r#\xE#\xEF\x3$\x5$\xF3\n$\x3$\x6$\xF6\n$\r$\xE$\xF7\x3$\x3"+
		"$\x6$\xFC\n$\r$\xE$\xFD\x3%\x6%\x101\n%\r%\xE%\x102\x3%\a%\x106\n%\f%"+
		"\xE%\x109\v%\x3&\x6&\x10C\n&\r&\xE&\x10D\x3&\x3&\x3y\x2\x2\'\x3\x2\x3"+
		"\x5\x2\x4\a\x2\x5\t\x2\x6\v\x2\a\r\x2\b\xF\x2\t\x11\x2\n\x13\x2\v\x15"+
		"\x2\f\x17\x2\r\x19\x2\xE\x1B\x2\xF\x1D\x2\x10\x1F\x2\x11!\x2\x12#\x2\x13"+
		"%\x2\x14\'\x2\x15)\x2\x16+\x2\x17-\x2\x18/\x2\x19\x31\x2\x1A\x33\x2\x1B"+
		"\x35\x2\x1C\x37\x2\x1D\x39\x2\x1E;\x2\x1F=\x2 ?\x2!\x41\x2\"\x43\x2#\x45"+
		"\x2$G\x2%I\x2&K\x2\'\x3\x2\t\x4\x2\f\f\xF\xF\x4\x2>>@@\x4\x2--//\x3\x2"+
		"\x32;\x4\x2\x43\\\x63|\x5\x2\x32;\x43\\\x63|\x5\x2\v\f\xF\xF\"\"\x11F"+
		"\x2\x3\x3\x2\x2\x2\x2\x5\x3\x2\x2\x2\x2\a\x3\x2\x2\x2\x2\t\x3\x2\x2\x2"+
		"\x2\v\x3\x2\x2\x2\x2\r\x3\x2\x2\x2\x2\xF\x3\x2\x2\x2\x2\x11\x3\x2\x2\x2"+
		"\x2\x13\x3\x2\x2\x2\x2\x15\x3\x2\x2\x2\x2\x17\x3\x2\x2\x2\x2\x19\x3\x2"+
		"\x2\x2\x2\x1B\x3\x2\x2\x2\x2\x1D\x3\x2\x2\x2\x2\x1F\x3\x2\x2\x2\x2!\x3"+
		"\x2\x2\x2\x2#\x3\x2\x2\x2\x2%\x3\x2\x2\x2\x2\'\x3\x2\x2\x2\x2)\x3\x2\x2"+
		"\x2\x2+\x3\x2\x2\x2\x2-\x3\x2\x2\x2\x2/\x3\x2\x2\x2\x2\x31\x3\x2\x2\x2"+
		"\x2\x33\x3\x2\x2\x2\x2\x35\x3\x2\x2\x2\x2\x37\x3\x2\x2\x2\x2\x39\x3\x2"+
		"\x2\x2\x2;\x3\x2\x2\x2\x2=\x3\x2\x2\x2\x2?\x3\x2\x2\x2\x2\x41\x3\x2\x2"+
		"\x2\x2\x43\x3\x2\x2\x2\x2\x45\x3\x2\x2\x2\x2G\x3\x2\x2\x2\x2I\x3\x2\x2"+
		"\x2\x2K\x3\x2\x2\x2\x3M\x3\x2\x2\x2\x5Q\x3\x2\x2\x2\aS\x3\x2\x2\x2\tY"+
		"\x3\x2\x2\x2\v]\x3\x2\x2\x2\r_\x3\x2\x2\x2\xF\x61\x3\x2\x2\x2\x11\x63"+
		"\x3\x2\x2\x2\x13\x65\x3\x2\x2\x2\x15g\x3\x2\x2\x2\x17i\x3\x2\x2\x2\x19"+
		"l\x3\x2\x2\x2\x1Bo\x3\x2\x2\x2\x1Ds\x3\x2\x2\x2\x1F\x81\x3\x2\x2\x2!\x8D"+
		"\x3\x2\x2\x2#\x90\x3\x2\x2\x2%\x93\x3\x2\x2\x2\'\x96\x3\x2\x2\x2)\x99"+
		"\x3\x2\x2\x2+\x9C\x3\x2\x2\x2-\x9F\x3\x2\x2\x2/\xA2\x3\x2\x2\x2\x31\xA5"+
		"\x3\x2\x2\x2\x33\xA9\x3\x2\x2\x2\x35\xAF\x3\x2\x2\x2\x37\xB2\x3\x2\x2"+
		"\x2\x39\xC0\x3\x2\x2\x2;\xC2\x3\x2\x2\x2=\xCE\x3\x2\x2\x2?\xE1\x3\x2\x2"+
		"\x2\x41\xE3\x3\x2\x2\x2\x43\xE6\x3\x2\x2\x2\x45\xEA\x3\x2\x2\x2G\xF2\x3"+
		"\x2\x2\x2I\x100\x3\x2\x2\x2K\x10B\x3\x2\x2\x2MN\a\x63\x2\x2NO\au\x2\x2"+
		"OP\au\x2\x2P\x4\x3\x2\x2\x2QR\a.\x2\x2R\x6\x3\x2\x2\x2ST\ay\x2\x2TU\a"+
		"j\x2\x2UV\ak\x2\x2VW\an\x2\x2WX\ag\x2\x2X\b\x3\x2\x2\x2YZ\ah\x2\x2Z[\a"+
		"q\x2\x2[\\\at\x2\x2\\\n\x3\x2\x2\x2]^\a-\x2\x2^\f\x3\x2\x2\x2_`\a/\x2"+
		"\x2`\xE\x3\x2\x2\x2\x61\x62\a\x31\x2\x2\x62\x10\x3\x2\x2\x2\x63\x64\a"+
		",\x2\x2\x64\x12\x3\x2\x2\x2\x65\x66\a*\x2\x2\x66\x14\x3\x2\x2\x2gh\a+"+
		"\x2\x2h\x16\x3\x2\x2\x2ij\a~\x2\x2jk\a~\x2\x2k\x18\x3\x2\x2\x2lm\a(\x2"+
		"\x2mn\a(\x2\x2n\x1A\x3\x2\x2\x2op\at\x2\x2pq\ag\x2\x2qr\av\x2\x2r\x1C"+
		"\x3\x2\x2\x2st\a<\x2\x2tu\a,\x2\x2uy\x3\x2\x2\x2vx\v\x2\x2\x2wv\x3\x2"+
		"\x2\x2x{\x3\x2\x2\x2yz\x3\x2\x2\x2yw\x3\x2\x2\x2z|\x3\x2\x2\x2{y\x3\x2"+
		"\x2\x2|}\a,\x2\x2}~\a<\x2\x2~\x7F\x3\x2\x2\x2\x7F\x80\b\xF\x2\x2\x80\x1E"+
		"\x3\x2\x2\x2\x81\x82\a<\x2\x2\x82\x83\a,\x2\x2\x83\x84\a,\x2\x2\x84\x88"+
		"\x3\x2\x2\x2\x85\x87\n\x2\x2\x2\x86\x85\x3\x2\x2\x2\x87\x8A\x3\x2\x2\x2"+
		"\x88\x86\x3\x2\x2\x2\x88\x89\x3\x2\x2\x2\x89\x8B\x3\x2\x2\x2\x8A\x88\x3"+
		"\x2\x2\x2\x8B\x8C\b\x10\x2\x2\x8C \x3\x2\x2\x2\x8D\x8E\a=\x2\x2\x8E\x8F"+
		"\a+\x2\x2\x8F\"\x3\x2\x2\x2\x90\x91\a<\x2\x2\x91\x92\a?\x2\x2\x92$\x3"+
		"\x2\x2\x2\x93\x94\a*\x2\x2\x94\x95\a<\x2\x2\x95&\x3\x2\x2\x2\x96\x97\a"+
		"<\x2\x2\x97\x98\a+\x2\x2\x98(\x3\x2\x2\x2\x99\x9A\a<\x2\x2\x9A\x9B\aX"+
		"\x2\x2\x9B*\x3\x2\x2\x2\x9C\x9D\a<\x2\x2\x9D\x9E\a\x44\x2\x2\x9E,\x3\x2"+
		"\x2\x2\x9F\xA0\a<\x2\x2\xA0\xA1\a\x46\x2\x2\xA1.\x3\x2\x2\x2\xA2\xA3\a"+
		"<\x2\x2\xA3\xA4\aK\x2\x2\xA4\x30\x3\x2\x2\x2\xA5\xA6\a\x66\x2\x2\xA6\xA7"+
		"\ag\x2\x2\xA7\xA8\ah\x2\x2\xA8\x32\x3\x2\x2\x2\xA9\xAA\a\x65\x2\x2\xAA"+
		"\xAB\aq\x2\x2\xAB\xAC\ap\x2\x2\xAC\xAD\au\x2\x2\xAD\xAE\av\x2\x2\xAE\x34"+
		"\x3\x2\x2\x2\xAF\xB0\ak\x2\x2\xB0\xB1\ah\x2\x2\xB1\x36\x3\x2\x2\x2\xB2"+
		"\xB3\ag\x2\x2\xB3\xB4\an\x2\x2\xB4\xB5\au\x2\x2\xB5\xB6\ag\x2\x2\xB6\x38"+
		"\x3\x2\x2\x2\xB7\xB8\a?\x2\x2\xB8\xC1\a?\x2\x2\xB9\xBA\a#\x2\x2\xBA\xC1"+
		"\a?\x2\x2\xBB\xBC\a>\x2\x2\xBC\xC1\a?\x2\x2\xBD\xBE\a@\x2\x2\xBE\xC1\a"+
		"?\x2\x2\xBF\xC1\t\x3\x2\x2\xC0\xB7\x3\x2\x2\x2\xC0\xB9\x3\x2\x2\x2\xC0"+
		"\xBB\x3\x2\x2\x2\xC0\xBD\x3\x2\x2\x2\xC0\xBF\x3\x2\x2\x2\xC1:\x3\x2\x2"+
		"\x2\xC2\xC3\aj\x2\x2\xC3\xC4\a\x63\x2\x2\xC4\xC5\ar\x2\x2\xC5\xC6\ar\x2"+
		"\x2\xC6\xC7\a{\x2\x2\xC7\xC8\a\x61\x2\x2\xC8\xC9\au\x2\x2\xC9\xCA\av\x2"+
		"\x2\xCA\xCB\a\x63\x2\x2\xCB\xCC\at\x2\x2\xCC\xCD\av\x2\x2\xCD<\x3\x2\x2"+
		"\x2\xCE\xCF\ao\x2\x2\xCF\xD0\a\x63\x2\x2\xD0\xD1\ak\x2\x2\xD1\xD2\ap\x2"+
		"\x2\xD2\xD3\aU\x2\x2\xD3\xD4\ao\x2\x2\xD4\xD5\ak\x2\x2\xD5\xD6\an\x2\x2"+
		"\xD6\xD7\ag\x2\x2\xD7>\x3\x2\x2\x2\xD8\xD9\av\x2\x2\xD9\xDA\at\x2\x2\xDA"+
		"\xDB\aw\x2\x2\xDB\xE2\ag\x2\x2\xDC\xDD\ah\x2\x2\xDD\xDE\a\x63\x2\x2\xDE"+
		"\xDF\an\x2\x2\xDF\xE0\au\x2\x2\xE0\xE2\ag\x2\x2\xE1\xD8\x3\x2\x2\x2\xE1"+
		"\xDC\x3\x2\x2\x2\xE2@\x3\x2\x2\x2\xE3\xE4\a}\x2\x2\xE4\xE5\a<\x2\x2\xE5"+
		"\x42\x3\x2\x2\x2\xE6\xE7\a<\x2\x2\xE7\xE8\a\x7F\x2\x2\xE8\x44\x3\x2\x2"+
		"\x2\xE9\xEB\t\x4\x2\x2\xEA\xE9\x3\x2\x2\x2\xEA\xEB\x3\x2\x2\x2\xEB\xED"+
		"\x3\x2\x2\x2\xEC\xEE\t\x5\x2\x2\xED\xEC\x3\x2\x2\x2\xEE\xEF\x3\x2\x2\x2"+
		"\xEF\xED\x3\x2\x2\x2\xEF\xF0\x3\x2\x2\x2\xF0\x46\x3\x2\x2\x2\xF1\xF3\t"+
		"\x4\x2\x2\xF2\xF1\x3\x2\x2\x2\xF2\xF3\x3\x2\x2\x2\xF3\xF5\x3\x2\x2\x2"+
		"\xF4\xF6\t\x5\x2\x2\xF5\xF4\x3\x2\x2\x2\xF6\xF7\x3\x2\x2\x2\xF7\xF5\x3"+
		"\x2\x2\x2\xF7\xF8\x3\x2\x2\x2\xF8\xF9\x3\x2\x2\x2\xF9\xFB\a\x30\x2\x2"+
		"\xFA\xFC\t\x5\x2\x2\xFB\xFA\x3\x2\x2\x2\xFC\xFD\x3\x2\x2\x2\xFD\xFB\x3"+
		"\x2\x2\x2\xFD\xFE\x3\x2\x2\x2\xFEH\x3\x2\x2\x2\xFF\x101\t\x6\x2\x2\x100"+
		"\xFF\x3\x2\x2\x2\x101\x102\x3\x2\x2\x2\x102\x100\x3\x2\x2\x2\x102\x103"+
		"\x3\x2\x2\x2\x103\x107\x3\x2\x2\x2\x104\x106\t\a\x2\x2\x105\x104\x3\x2"+
		"\x2\x2\x106\x109\x3\x2\x2\x2\x107\x105\x3\x2\x2\x2\x107\x108\x3\x2\x2"+
		"\x2\x108J\x3\x2\x2\x2\x109\x107\x3\x2\x2\x2\x10A\x10C\t\b\x2\x2\x10B\x10A"+
		"\x3\x2\x2\x2\x10C\x10D\x3\x2\x2\x2\x10D\x10B\x3\x2\x2\x2\x10D\x10E\x3"+
		"\x2\x2\x2\x10E\x10F\x3\x2\x2\x2\x10F\x110\b&\x3\x2\x110L\x3\x2\x2\x2\xF"+
		"\x2y\x88\xC0\xE1\xEA\xEF\xF2\xF7\xFD\x102\x107\x10D\x4\b\x2\x2\x2\x3\x2";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Happy_language
