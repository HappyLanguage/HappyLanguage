//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:\HappyLanguage\HappyLanguage\Happy_language\Grammar.g4 by ANTLR 4.5.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Happy_language {
using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="GrammarParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.3")]
[System.CLSCompliant(false)]
public interface IGrammarListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="GrammarParser.start"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStart([NotNull] GrammarParser.StartContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GrammarParser.start"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStart([NotNull] GrammarParser.StartContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="GrammarParser.def_con_var"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDef_con_var([NotNull] GrammarParser.Def_con_varContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GrammarParser.def_con_var"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDef_con_var([NotNull] GrammarParser.Def_con_varContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="GrammarParser.def_const"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDef_const([NotNull] GrammarParser.Def_constContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GrammarParser.def_const"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDef_const([NotNull] GrammarParser.Def_constContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="GrammarParser.def_var"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDef_var([NotNull] GrammarParser.Def_varContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GrammarParser.def_var"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDef_var([NotNull] GrammarParser.Def_varContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="GrammarParser.def_var_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDef_var_expression([NotNull] GrammarParser.Def_var_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GrammarParser.def_var_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDef_var_expression([NotNull] GrammarParser.Def_var_expressionContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="GrammarParser.def_var_from_function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDef_var_from_function([NotNull] GrammarParser.Def_var_from_functionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GrammarParser.def_var_from_function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDef_var_from_function([NotNull] GrammarParser.Def_var_from_functionContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="GrammarParser.array_inicialization"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArray_inicialization([NotNull] GrammarParser.Array_inicializationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GrammarParser.array_inicialization"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArray_inicialization([NotNull] GrammarParser.Array_inicializationContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="GrammarParser.function_call"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunction_call([NotNull] GrammarParser.Function_callContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GrammarParser.function_call"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunction_call([NotNull] GrammarParser.Function_callContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="GrammarParser.def_var_blok"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDef_var_blok([NotNull] GrammarParser.Def_var_blokContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GrammarParser.def_var_blok"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDef_var_blok([NotNull] GrammarParser.Def_var_blokContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="GrammarParser.par_in_function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPar_in_function([NotNull] GrammarParser.Par_in_functionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GrammarParser.par_in_function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPar_in_function([NotNull] GrammarParser.Par_in_functionContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="GrammarParser.def_functions"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDef_functions([NotNull] GrammarParser.Def_functionsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GrammarParser.def_functions"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDef_functions([NotNull] GrammarParser.Def_functionsContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="GrammarParser.def_one_function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDef_one_function([NotNull] GrammarParser.Def_one_functionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GrammarParser.def_one_function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDef_one_function([NotNull] GrammarParser.Def_one_functionContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="GrammarParser.function_return"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunction_return([NotNull] GrammarParser.Function_returnContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GrammarParser.function_return"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunction_return([NotNull] GrammarParser.Function_returnContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="GrammarParser.function_return_data_typ"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunction_return_data_typ([NotNull] GrammarParser.Function_return_data_typContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GrammarParser.function_return_data_typ"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunction_return_data_typ([NotNull] GrammarParser.Function_return_data_typContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="GrammarParser.data_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterData_type([NotNull] GrammarParser.Data_typeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GrammarParser.data_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitData_type([NotNull] GrammarParser.Data_typeContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="GrammarParser.main"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMain([NotNull] GrammarParser.MainContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GrammarParser.main"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMain([NotNull] GrammarParser.MainContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="GrammarParser.blok_function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBlok_function([NotNull] GrammarParser.Blok_functionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GrammarParser.blok_function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBlok_function([NotNull] GrammarParser.Blok_functionContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="GrammarParser.blok"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBlok([NotNull] GrammarParser.BlokContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GrammarParser.blok"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBlok([NotNull] GrammarParser.BlokContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="GrammarParser.if"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIf([NotNull] GrammarParser.IfContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GrammarParser.if"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIf([NotNull] GrammarParser.IfContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="GrammarParser.else_if"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterElse_if([NotNull] GrammarParser.Else_ifContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GrammarParser.else_if"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitElse_if([NotNull] GrammarParser.Else_ifContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="GrammarParser.else"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterElse([NotNull] GrammarParser.ElseContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GrammarParser.else"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitElse([NotNull] GrammarParser.ElseContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="GrammarParser.while"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWhile([NotNull] GrammarParser.WhileContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GrammarParser.while"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWhile([NotNull] GrammarParser.WhileContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="GrammarParser.do_while"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDo_while([NotNull] GrammarParser.Do_whileContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GrammarParser.do_while"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDo_while([NotNull] GrammarParser.Do_whileContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="GrammarParser.for"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFor([NotNull] GrammarParser.ForContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GrammarParser.for"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFor([NotNull] GrammarParser.ForContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="GrammarParser.for_condition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFor_condition([NotNull] GrammarParser.For_conditionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GrammarParser.for_condition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFor_condition([NotNull] GrammarParser.For_conditionContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="GrammarParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpression([NotNull] GrammarParser.ExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GrammarParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpression([NotNull] GrammarParser.ExpressionContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="GrammarParser.expression_multiply"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpression_multiply([NotNull] GrammarParser.Expression_multiplyContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GrammarParser.expression_multiply"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpression_multiply([NotNull] GrammarParser.Expression_multiplyContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="GrammarParser.expression_item"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpression_item([NotNull] GrammarParser.Expression_itemContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GrammarParser.expression_item"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpression_item([NotNull] GrammarParser.Expression_itemContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="GrammarParser.condition_item"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCondition_item([NotNull] GrammarParser.Condition_itemContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GrammarParser.condition_item"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCondition_item([NotNull] GrammarParser.Condition_itemContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="GrammarParser.condition_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCondition_expression([NotNull] GrammarParser.Condition_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GrammarParser.condition_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCondition_expression([NotNull] GrammarParser.Condition_expressionContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="GrammarParser.condition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCondition([NotNull] GrammarParser.ConditionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GrammarParser.condition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCondition([NotNull] GrammarParser.ConditionContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="GrammarParser.array_index"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArray_index([NotNull] GrammarParser.Array_indexContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GrammarParser.array_index"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArray_index([NotNull] GrammarParser.Array_indexContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="GrammarParser.assignment_array"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssignment_array([NotNull] GrammarParser.Assignment_arrayContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GrammarParser.assignment_array"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssignment_array([NotNull] GrammarParser.Assignment_arrayContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="GrammarParser.assignment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssignment([NotNull] GrammarParser.AssignmentContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GrammarParser.assignment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssignment([NotNull] GrammarParser.AssignmentContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="GrammarParser.parameters"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParameters([NotNull] GrammarParser.ParametersContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GrammarParser.parameters"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParameters([NotNull] GrammarParser.ParametersContext context);
}
} // namespace Happy_language
