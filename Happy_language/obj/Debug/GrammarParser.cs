//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.4-SNAPSHOT
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Jan\Documents\Visual Studio 2015\Projects\Happy_language\Happy_language\Grammar.g4 by ANTLR 4.5.4-SNAPSHOT

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Happy_language {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.4-SNAPSHOT")]
[System.CLSCompliant(false)]
public partial class GrammarParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, Comment=12, Line_comment=13, Semi=14, Assign=15, Bracket_left=16, 
		Bracket_right=17, Data_type_void=18, Data_type_bool=19, Data_type_double=20, 
		Data_type_int=21, Function_def=22, Const=23, If=24, Else=25, Operator_condition=26, 
		Start_prog=27, Main_name=28, Bool=29, Start_blok=30, End_blok=31, Int=32, 
		Double=33, Identifier=34, WS=35;
	public const int
		RULE_start = 0, RULE_def_con_var = 1, RULE_const_and_var = 2, RULE_def_var = 3, 
		RULE_def_var_expression = 4, RULE_def_var_from_function = 5, RULE_function_call = 6, 
		RULE_def_var_blok = 7, RULE_par_in_function = 8, RULE_def_function = 9, 
		RULE_function_return_data_typ = 10, RULE_data_type = 11, RULE_main = 12, 
		RULE_blok_function = 13, RULE_blok = 14, RULE_if = 15, RULE_else = 16, 
		RULE_while = 17, RULE_for = 18, RULE_for_condition = 19, RULE_expression = 20, 
		RULE_condition_item = 21, RULE_condition_expression = 22, RULE_condition = 23, 
		RULE_assignment = 24, RULE_parametrs = 25;
	public static readonly string[] ruleNames = {
		"start", "def_con_var", "const_and_var", "def_var", "def_var_expression", 
		"def_var_from_function", "function_call", "def_var_blok", "par_in_function", 
		"def_function", "function_return_data_typ", "data_type", "main", "blok_function", 
		"blok", "if", "else", "while", "for", "for_condition", "expression", "condition_item", 
		"condition_expression", "condition", "assignment", "parametrs"
	};

	private static readonly string[] _LiteralNames = {
		null, "','", "'while'", "'for'", "'+'", "'-'", "'/'", "'*'", "'('", "')'", 
		"'||'", "'&&'", null, null, "';)'", "':='", "'(:'", "':)'", "':V'", "':B'", 
		"':D'", "':I'", "'def'", "'const'", "'if'", "'else'", null, "'happy_start'", 
		"'mainSmile'", null, "'{:'", "':}'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		"Comment", "Line_comment", "Semi", "Assign", "Bracket_left", "Bracket_right", 
		"Data_type_void", "Data_type_bool", "Data_type_double", "Data_type_int", 
		"Function_def", "Const", "If", "Else", "Operator_condition", "Start_prog", 
		"Main_name", "Bool", "Start_blok", "End_blok", "Int", "Double", "Identifier", 
		"WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Grammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public GrammarParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class StartContext : ParserRuleContext {
		public ITerminalNode Start_prog() { return GetToken(GrammarParser.Start_prog, 0); }
		public ITerminalNode Start_blok() { return GetToken(GrammarParser.Start_blok, 0); }
		public Def_con_varContext def_con_var() {
			return GetRuleContext<Def_con_varContext>(0);
		}
		public Def_functionContext def_function() {
			return GetRuleContext<Def_functionContext>(0);
		}
		public MainContext main() {
			return GetRuleContext<MainContext>(0);
		}
		public ITerminalNode End_blok() { return GetToken(GrammarParser.End_blok, 0); }
		public StartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterStart(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitStart(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartContext start() {
		StartContext _localctx = new StartContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_start);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 52; Match(Start_prog);
			State = 53; Match(Start_blok);
			State = 54; def_con_var();
			State = 55; def_function();
			State = 56; main();
			State = 57; Match(End_blok);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Def_con_varContext : ParserRuleContext {
		public Const_and_varContext const_and_var() {
			return GetRuleContext<Const_and_varContext>(0);
		}
		public Def_con_varContext def_con_var() {
			return GetRuleContext<Def_con_varContext>(0);
		}
		public Def_con_varContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_def_con_var; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterDef_con_var(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitDef_con_var(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDef_con_var(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Def_con_varContext def_con_var() {
		Def_con_varContext _localctx = new Def_con_varContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_def_con_var);
		try {
			State = 63;
			switch (_input.La(1)) {
			case Data_type_bool:
			case Data_type_double:
			case Data_type_int:
			case Const:
				EnterOuterAlt(_localctx, 1);
				{
				State = 59; const_and_var();
				State = 60; def_con_var();
				}
				break;
			case Function_def:
			case Main_name:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Const_and_varContext : ParserRuleContext {
		public Def_varContext def_var() {
			return GetRuleContext<Def_varContext>(0);
		}
		public ITerminalNode Const() { return GetToken(GrammarParser.Const, 0); }
		public ITerminalNode Data_type_bool() { return GetToken(GrammarParser.Data_type_bool, 0); }
		public ITerminalNode Identifier() { return GetToken(GrammarParser.Identifier, 0); }
		public ITerminalNode Assign() { return GetToken(GrammarParser.Assign, 0); }
		public ITerminalNode Bool() { return GetToken(GrammarParser.Bool, 0); }
		public ITerminalNode Semi() { return GetToken(GrammarParser.Semi, 0); }
		public ITerminalNode Data_type_int() { return GetToken(GrammarParser.Data_type_int, 0); }
		public ITerminalNode Int() { return GetToken(GrammarParser.Int, 0); }
		public ITerminalNode Data_type_double() { return GetToken(GrammarParser.Data_type_double, 0); }
		public ITerminalNode Double() { return GetToken(GrammarParser.Double, 0); }
		public Const_and_varContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_const_and_var; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterConst_and_var(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitConst_and_var(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConst_and_var(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Const_and_varContext const_and_var() {
		Const_and_varContext _localctx = new Const_and_varContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_const_and_var);
		try {
			State = 90;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 65; def_var();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 66; Match(Const);
				State = 67; Match(Data_type_bool);
				State = 68; Match(Identifier);
				State = 69; Match(Assign);
				State = 70; Match(Bool);
				State = 71; Match(Semi);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 72; Match(Const);
				State = 73; Match(Data_type_int);
				State = 74; Match(Identifier);
				State = 75; Match(Assign);
				State = 76; Match(Int);
				State = 77; Match(Semi);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 78; Match(Const);
				State = 79; Match(Data_type_double);
				State = 80; Match(Identifier);
				State = 81; Match(Assign);
				State = 82; Match(Double);
				State = 83; Match(Semi);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 84; Match(Const);
				State = 85; Match(Data_type_double);
				State = 86; Match(Identifier);
				State = 87; Match(Assign);
				State = 88; Match(Int);
				State = 89; Match(Semi);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Def_varContext : ParserRuleContext {
		public ITerminalNode Data_type_bool() { return GetToken(GrammarParser.Data_type_bool, 0); }
		public ITerminalNode Identifier() { return GetToken(GrammarParser.Identifier, 0); }
		public ITerminalNode Assign() { return GetToken(GrammarParser.Assign, 0); }
		public ITerminalNode Bool() { return GetToken(GrammarParser.Bool, 0); }
		public ITerminalNode Semi() { return GetToken(GrammarParser.Semi, 0); }
		public ITerminalNode Data_type_int() { return GetToken(GrammarParser.Data_type_int, 0); }
		public ITerminalNode Int() { return GetToken(GrammarParser.Int, 0); }
		public ITerminalNode Data_type_double() { return GetToken(GrammarParser.Data_type_double, 0); }
		public ITerminalNode Double() { return GetToken(GrammarParser.Double, 0); }
		public Def_varContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_def_var; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterDef_var(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitDef_var(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDef_var(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Def_varContext def_var() {
		Def_varContext _localctx = new Def_varContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_def_var);
		try {
			State = 112;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,2,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 92; Match(Data_type_bool);
				State = 93; Match(Identifier);
				State = 94; Match(Assign);
				State = 95; Match(Bool);
				State = 96; Match(Semi);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 97; Match(Data_type_int);
				State = 98; Match(Identifier);
				State = 99; Match(Assign);
				State = 100; Match(Int);
				State = 101; Match(Semi);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 102; Match(Data_type_double);
				State = 103; Match(Identifier);
				State = 104; Match(Assign);
				State = 105; Match(Int);
				State = 106; Match(Semi);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 107; Match(Data_type_double);
				State = 108; Match(Identifier);
				State = 109; Match(Assign);
				State = 110; Match(Double);
				State = 111; Match(Semi);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Def_var_expressionContext : ParserRuleContext {
		public ITerminalNode Data_type_int() { return GetToken(GrammarParser.Data_type_int, 0); }
		public ITerminalNode Identifier() { return GetToken(GrammarParser.Identifier, 0); }
		public ITerminalNode Assign() { return GetToken(GrammarParser.Assign, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode Semi() { return GetToken(GrammarParser.Semi, 0); }
		public ITerminalNode Data_type_double() { return GetToken(GrammarParser.Data_type_double, 0); }
		public Def_var_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_def_var_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterDef_var_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitDef_var_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDef_var_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Def_var_expressionContext def_var_expression() {
		Def_var_expressionContext _localctx = new Def_var_expressionContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_def_var_expression);
		try {
			State = 131;
			switch (_input.La(1)) {
			case Data_type_int:
				EnterOuterAlt(_localctx, 1);
				{
				State = 114; Match(Data_type_int);
				State = 115; Match(Identifier);
				State = 116; Match(Assign);
				State = 117; expression(0);
				State = 118; Match(Semi);
				}
				break;
			case Data_type_double:
				EnterOuterAlt(_localctx, 2);
				{
				State = 120; Match(Data_type_double);
				State = 121; Match(Identifier);
				State = 122; Match(Assign);
				State = 123; expression(0);
				State = 124; Match(Semi);
				}
				break;
			case Identifier:
				EnterOuterAlt(_localctx, 3);
				{
				State = 126; Match(Identifier);
				State = 127; Match(Assign);
				State = 128; expression(0);
				State = 129; Match(Semi);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Def_var_from_functionContext : ParserRuleContext {
		public ITerminalNode Data_type_bool() { return GetToken(GrammarParser.Data_type_bool, 0); }
		public ITerminalNode Identifier() { return GetToken(GrammarParser.Identifier, 0); }
		public ITerminalNode Assign() { return GetToken(GrammarParser.Assign, 0); }
		public Function_callContext function_call() {
			return GetRuleContext<Function_callContext>(0);
		}
		public ITerminalNode Data_type_int() { return GetToken(GrammarParser.Data_type_int, 0); }
		public ITerminalNode Data_type_double() { return GetToken(GrammarParser.Data_type_double, 0); }
		public Def_var_from_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_def_var_from_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterDef_var_from_function(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitDef_var_from_function(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDef_var_from_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Def_var_from_functionContext def_var_from_function() {
		Def_var_from_functionContext _localctx = new Def_var_from_functionContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_def_var_from_function);
		try {
			State = 145;
			switch (_input.La(1)) {
			case Data_type_bool:
				EnterOuterAlt(_localctx, 1);
				{
				State = 133; Match(Data_type_bool);
				State = 134; Match(Identifier);
				State = 135; Match(Assign);
				State = 136; function_call();
				}
				break;
			case Data_type_int:
				EnterOuterAlt(_localctx, 2);
				{
				State = 137; Match(Data_type_int);
				State = 138; Match(Identifier);
				State = 139; Match(Assign);
				State = 140; function_call();
				}
				break;
			case Data_type_double:
				EnterOuterAlt(_localctx, 3);
				{
				State = 141; Match(Data_type_double);
				State = 142; Match(Identifier);
				State = 143; Match(Assign);
				State = 144; function_call();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_callContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(GrammarParser.Identifier, 0); }
		public ITerminalNode Bracket_left() { return GetToken(GrammarParser.Bracket_left, 0); }
		public Par_in_functionContext par_in_function() {
			return GetRuleContext<Par_in_functionContext>(0);
		}
		public ITerminalNode Bracket_right() { return GetToken(GrammarParser.Bracket_right, 0); }
		public ITerminalNode Semi() { return GetToken(GrammarParser.Semi, 0); }
		public Function_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_call; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterFunction_call(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitFunction_call(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_call(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_callContext function_call() {
		Function_callContext _localctx = new Function_callContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_function_call);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 147; Match(Identifier);
			State = 148; Match(Bracket_left);
			State = 149; par_in_function();
			State = 150; Match(Bracket_right);
			State = 151; Match(Semi);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Def_var_blokContext : ParserRuleContext {
		public Def_varContext def_var() {
			return GetRuleContext<Def_varContext>(0);
		}
		public Def_var_blokContext def_var_blok() {
			return GetRuleContext<Def_var_blokContext>(0);
		}
		public Def_var_from_functionContext def_var_from_function() {
			return GetRuleContext<Def_var_from_functionContext>(0);
		}
		public Def_var_expressionContext def_var_expression() {
			return GetRuleContext<Def_var_expressionContext>(0);
		}
		public Def_var_blokContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_def_var_blok; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterDef_var_blok(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitDef_var_blok(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDef_var_blok(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Def_var_blokContext def_var_blok() {
		Def_var_blokContext _localctx = new Def_var_blokContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_def_var_blok);
		try {
			State = 163;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,5,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 153; def_var();
				State = 154; def_var_blok();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 156; def_var_from_function();
				State = 157; def_var_blok();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 159; def_var_expression();
				State = 160; def_var_blok();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Par_in_functionContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(GrammarParser.Identifier, 0); }
		public Par_in_functionContext par_in_function() {
			return GetRuleContext<Par_in_functionContext>(0);
		}
		public ITerminalNode Bool() { return GetToken(GrammarParser.Bool, 0); }
		public ITerminalNode Int() { return GetToken(GrammarParser.Int, 0); }
		public ITerminalNode Double() { return GetToken(GrammarParser.Double, 0); }
		public Par_in_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_par_in_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterPar_in_function(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitPar_in_function(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPar_in_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Par_in_functionContext par_in_function() {
		Par_in_functionContext _localctx = new Par_in_functionContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_par_in_function);
		try {
			State = 182;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,6,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 165; Match(Identifier);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 166; Match(Identifier);
				State = 167; Match(T__0);
				State = 168; par_in_function();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 169; Match(Bool);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 170; Match(Bool);
				State = 171; Match(T__0);
				State = 172; par_in_function();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 173; Match(Int);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 174; Match(Int);
				State = 175; Match(T__0);
				State = 176; par_in_function();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 177; Match(Double);
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 178; Match(Double);
				State = 179; Match(T__0);
				State = 180; par_in_function();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Def_functionContext : ParserRuleContext {
		public ITerminalNode Function_def() { return GetToken(GrammarParser.Function_def, 0); }
		public Function_return_data_typContext function_return_data_typ() {
			return GetRuleContext<Function_return_data_typContext>(0);
		}
		public ITerminalNode Identifier() { return GetToken(GrammarParser.Identifier, 0); }
		public ITerminalNode Bracket_left() { return GetToken(GrammarParser.Bracket_left, 0); }
		public ParametrsContext parametrs() {
			return GetRuleContext<ParametrsContext>(0);
		}
		public ITerminalNode Bracket_right() { return GetToken(GrammarParser.Bracket_right, 0); }
		public ITerminalNode Start_blok() { return GetToken(GrammarParser.Start_blok, 0); }
		public Blok_functionContext blok_function() {
			return GetRuleContext<Blok_functionContext>(0);
		}
		public ITerminalNode End_blok() { return GetToken(GrammarParser.End_blok, 0); }
		public Def_functionContext def_function() {
			return GetRuleContext<Def_functionContext>(0);
		}
		public Def_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_def_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterDef_function(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitDef_function(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDef_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Def_functionContext def_function() {
		Def_functionContext _localctx = new Def_functionContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_def_function);
		try {
			State = 196;
			switch (_input.La(1)) {
			case Function_def:
				EnterOuterAlt(_localctx, 1);
				{
				State = 184; Match(Function_def);
				State = 185; function_return_data_typ();
				State = 186; Match(Identifier);
				State = 187; Match(Bracket_left);
				State = 188; parametrs();
				State = 189; Match(Bracket_right);
				State = 190; Match(Start_blok);
				State = 191; blok_function();
				State = 192; Match(End_blok);
				State = 193; def_function();
				}
				break;
			case Main_name:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_return_data_typContext : ParserRuleContext {
		public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		public ITerminalNode Data_type_void() { return GetToken(GrammarParser.Data_type_void, 0); }
		public Function_return_data_typContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_return_data_typ; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterFunction_return_data_typ(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitFunction_return_data_typ(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_return_data_typ(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_return_data_typContext function_return_data_typ() {
		Function_return_data_typContext _localctx = new Function_return_data_typContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_function_return_data_typ);
		try {
			State = 200;
			switch (_input.La(1)) {
			case Data_type_bool:
			case Data_type_double:
			case Data_type_int:
				EnterOuterAlt(_localctx, 1);
				{
				State = 198; data_type();
				}
				break;
			case Data_type_void:
				EnterOuterAlt(_localctx, 2);
				{
				State = 199; Match(Data_type_void);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Data_typeContext : ParserRuleContext {
		public ITerminalNode Data_type_int() { return GetToken(GrammarParser.Data_type_int, 0); }
		public ITerminalNode Data_type_bool() { return GetToken(GrammarParser.Data_type_bool, 0); }
		public ITerminalNode Data_type_double() { return GetToken(GrammarParser.Data_type_double, 0); }
		public Data_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_data_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterData_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitData_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitData_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Data_typeContext data_type() {
		Data_typeContext _localctx = new Data_typeContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_data_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 202;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Data_type_bool) | (1L << Data_type_double) | (1L << Data_type_int))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MainContext : ParserRuleContext {
		public ITerminalNode Main_name() { return GetToken(GrammarParser.Main_name, 0); }
		public ITerminalNode Bracket_left() { return GetToken(GrammarParser.Bracket_left, 0); }
		public ITerminalNode Bracket_right() { return GetToken(GrammarParser.Bracket_right, 0); }
		public ITerminalNode Start_blok() { return GetToken(GrammarParser.Start_blok, 0); }
		public Blok_functionContext blok_function() {
			return GetRuleContext<Blok_functionContext>(0);
		}
		public ITerminalNode End_blok() { return GetToken(GrammarParser.End_blok, 0); }
		public MainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_main; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterMain(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitMain(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMain(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MainContext main() {
		MainContext _localctx = new MainContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_main);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 204; Match(Main_name);
			State = 205; Match(Bracket_left);
			State = 206; Match(Bracket_right);
			State = 207; Match(Start_blok);
			State = 208; blok_function();
			State = 209; Match(End_blok);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Blok_functionContext : ParserRuleContext {
		public Def_var_blokContext def_var_blok() {
			return GetRuleContext<Def_var_blokContext>(0);
		}
		public BlokContext blok() {
			return GetRuleContext<BlokContext>(0);
		}
		public Blok_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blok_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterBlok_function(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitBlok_function(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlok_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Blok_functionContext blok_function() {
		Blok_functionContext _localctx = new Blok_functionContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_blok_function);
		try {
			State = 215;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,9,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 211; def_var_blok();
				State = 212; blok();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlokContext : ParserRuleContext {
		public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		public BlokContext blok() {
			return GetRuleContext<BlokContext>(0);
		}
		public IfContext @if() {
			return GetRuleContext<IfContext>(0);
		}
		public WhileContext @while() {
			return GetRuleContext<WhileContext>(0);
		}
		public ForContext @for() {
			return GetRuleContext<ForContext>(0);
		}
		public BlokContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blok; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterBlok(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitBlok(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlok(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlokContext blok() {
		BlokContext _localctx = new BlokContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_blok);
		try {
			State = 230;
			switch (_input.La(1)) {
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 217; assignment();
				State = 218; blok();
				}
				break;
			case If:
				EnterOuterAlt(_localctx, 2);
				{
				State = 220; @if();
				State = 221; blok();
				}
				break;
			case T__1:
				EnterOuterAlt(_localctx, 3);
				{
				State = 223; @while();
				State = 224; blok();
				}
				break;
			case T__2:
				EnterOuterAlt(_localctx, 4);
				{
				State = 226; @for();
				State = 227; blok();
				}
				break;
			case End_blok:
				EnterOuterAlt(_localctx, 5);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfContext : ParserRuleContext {
		public ITerminalNode If() { return GetToken(GrammarParser.If, 0); }
		public ITerminalNode Bracket_left() { return GetToken(GrammarParser.Bracket_left, 0); }
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public ITerminalNode Bracket_right() { return GetToken(GrammarParser.Bracket_right, 0); }
		public ITerminalNode Start_blok() { return GetToken(GrammarParser.Start_blok, 0); }
		public BlokContext blok() {
			return GetRuleContext<BlokContext>(0);
		}
		public ITerminalNode End_blok() { return GetToken(GrammarParser.End_blok, 0); }
		public ElseContext @else() {
			return GetRuleContext<ElseContext>(0);
		}
		public IfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterIf(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitIf(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfContext @if() {
		IfContext _localctx = new IfContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_if);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 232; Match(If);
			State = 233; Match(Bracket_left);
			State = 234; condition();
			State = 235; Match(Bracket_right);
			State = 236; Match(Start_blok);
			State = 237; blok();
			State = 238; Match(End_blok);
			State = 239; @else();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseContext : ParserRuleContext {
		public ITerminalNode Else() { return GetToken(GrammarParser.Else, 0); }
		public ITerminalNode Start_blok() { return GetToken(GrammarParser.Start_blok, 0); }
		public BlokContext blok() {
			return GetRuleContext<BlokContext>(0);
		}
		public ITerminalNode End_blok() { return GetToken(GrammarParser.End_blok, 0); }
		public ElseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_else; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterElse(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitElse(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseContext @else() {
		ElseContext _localctx = new ElseContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_else);
		try {
			State = 247;
			switch (_input.La(1)) {
			case Else:
				EnterOuterAlt(_localctx, 1);
				{
				State = 241; Match(Else);
				State = 242; Match(Start_blok);
				State = 243; blok();
				State = 244; Match(End_blok);
				}
				break;
			case T__1:
			case T__2:
			case If:
			case End_blok:
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileContext : ParserRuleContext {
		public ITerminalNode Bracket_left() { return GetToken(GrammarParser.Bracket_left, 0); }
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public ITerminalNode Bracket_right() { return GetToken(GrammarParser.Bracket_right, 0); }
		public ITerminalNode Start_blok() { return GetToken(GrammarParser.Start_blok, 0); }
		public BlokContext blok() {
			return GetRuleContext<BlokContext>(0);
		}
		public ITerminalNode End_blok() { return GetToken(GrammarParser.End_blok, 0); }
		public WhileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_while; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterWhile(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitWhile(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileContext @while() {
		WhileContext _localctx = new WhileContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_while);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 249; Match(T__1);
			State = 250; Match(Bracket_left);
			State = 251; condition();
			State = 252; Match(Bracket_right);
			State = 253; Match(Start_blok);
			State = 254; blok();
			State = 255; Match(End_blok);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForContext : ParserRuleContext {
		public ITerminalNode Bracket_left() { return GetToken(GrammarParser.Bracket_left, 0); }
		public For_conditionContext for_condition() {
			return GetRuleContext<For_conditionContext>(0);
		}
		public ITerminalNode Bracket_right() { return GetToken(GrammarParser.Bracket_right, 0); }
		public ITerminalNode Start_blok() { return GetToken(GrammarParser.Start_blok, 0); }
		public BlokContext blok() {
			return GetRuleContext<BlokContext>(0);
		}
		public ITerminalNode End_blok() { return GetToken(GrammarParser.End_blok, 0); }
		public ForContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterFor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitFor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForContext @for() {
		ForContext _localctx = new ForContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_for);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 257; Match(T__2);
			State = 258; Match(Bracket_left);
			State = 259; for_condition();
			State = 260; Match(Bracket_right);
			State = 261; Match(Start_blok);
			State = 262; blok();
			State = 263; Match(End_blok);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_conditionContext : ParserRuleContext {
		public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public ITerminalNode Semi() { return GetToken(GrammarParser.Semi, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public For_conditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_condition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterFor_condition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitFor_condition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFor_condition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public For_conditionContext for_condition() {
		For_conditionContext _localctx = new For_conditionContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_for_condition);
		try {
			State = 274;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,12,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 265; assignment();
				State = 266; condition();
				State = 267; Match(Semi);
				State = 268; expression(0);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 270; assignment();
				State = 271; condition();
				State = 272; Match(Semi);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode Int() { return GetToken(GrammarParser.Int, 0); }
		public ITerminalNode Double() { return GetToken(GrammarParser.Double, 0); }
		public ITerminalNode Identifier() { return GetToken(GrammarParser.Identifier, 0); }
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(_ctx, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 40;
		EnterRecursionRule(_localctx, 40, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 284;
			switch (_input.La(1)) {
			case Int:
				{
				State = 277; Match(Int);
				}
				break;
			case Double:
				{
				State = 278; Match(Double);
				}
				break;
			case Identifier:
				{
				State = 279; Match(Identifier);
				}
				break;
			case T__7:
				{
				State = 280; Match(T__7);
				State = 281; expression(0);
				State = 282; Match(T__8);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			_ctx.stop = _input.Lt(-1);
			State = 300;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,15,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 298;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,14,_ctx) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 286;
						if (!(Precpred(_ctx, 8))) throw new FailedPredicateException(this, "Precpred(_ctx, 8)");
						State = 287; Match(T__3);
						State = 288; expression(9);
						}
						break;

					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 289;
						if (!(Precpred(_ctx, 7))) throw new FailedPredicateException(this, "Precpred(_ctx, 7)");
						State = 290; Match(T__4);
						State = 291; expression(8);
						}
						break;

					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 292;
						if (!(Precpred(_ctx, 6))) throw new FailedPredicateException(this, "Precpred(_ctx, 6)");
						State = 293; Match(T__5);
						State = 294; expression(7);
						}
						break;

					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 295;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 296; Match(T__6);
						State = 297; expression(6);
						}
						break;
					}
					} 
				}
				State = 302;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,15,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Condition_itemContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(GrammarParser.Identifier, 0); }
		public ITerminalNode Int() { return GetToken(GrammarParser.Int, 0); }
		public ITerminalNode Double() { return GetToken(GrammarParser.Double, 0); }
		public ITerminalNode Bool() { return GetToken(GrammarParser.Bool, 0); }
		public Condition_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition_item; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterCondition_item(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitCondition_item(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondition_item(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Condition_itemContext condition_item() {
		Condition_itemContext _localctx = new Condition_itemContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_condition_item);
		try {
			State = 319;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,16,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 303; Match(Identifier);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 304; Match(Int);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 305; Match(Double);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 306; Match(Bool);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 307; Match(T__7);
				State = 308; Match(Identifier);
				State = 309; Match(T__8);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 310; Match(T__7);
				State = 311; Match(Int);
				State = 312; Match(T__8);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 313; Match(T__7);
				State = 314; Match(Double);
				State = 315; Match(T__8);
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 316; Match(T__7);
				State = 317; Match(Bool);
				State = 318; Match(T__8);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Condition_expressionContext : ParserRuleContext {
		public Condition_itemContext[] condition_item() {
			return GetRuleContexts<Condition_itemContext>();
		}
		public Condition_itemContext condition_item(int i) {
			return GetRuleContext<Condition_itemContext>(i);
		}
		public ITerminalNode Operator_condition() { return GetToken(GrammarParser.Operator_condition, 0); }
		public Condition_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterCondition_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitCondition_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondition_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Condition_expressionContext condition_expression() {
		Condition_expressionContext _localctx = new Condition_expressionContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_condition_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 321; condition_item();
			State = 322; Match(Operator_condition);
			State = 323; condition_item();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionContext : ParserRuleContext {
		public Condition_expressionContext condition_expression() {
			return GetRuleContext<Condition_expressionContext>(0);
		}
		public ConditionContext[] condition() {
			return GetRuleContexts<ConditionContext>();
		}
		public ConditionContext condition(int i) {
			return GetRuleContext<ConditionContext>(i);
		}
		public ITerminalNode Bool() { return GetToken(GrammarParser.Bool, 0); }
		public ConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterCondition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitCondition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionContext condition() {
		ConditionContext _localctx = new ConditionContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_condition);
		try {
			State = 351;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,17,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 325; condition_expression();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 326; condition_expression();
				State = 327; Match(T__9);
				State = 328; condition();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 330; condition_expression();
				State = 331; Match(T__10);
				State = 332; condition();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 334; Match(T__7);
				State = 335; condition();
				State = 336; Match(T__8);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 338; Match(T__7);
				State = 339; condition();
				State = 340; Match(T__8);
				State = 341; Match(T__10);
				State = 342; condition();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 344; Match(T__7);
				State = 345; condition();
				State = 346; Match(T__8);
				State = 347; Match(T__9);
				State = 348; condition();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 350; Match(Bool);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		public ITerminalNode[] Identifier() { return GetTokens(GrammarParser.Identifier); }
		public ITerminalNode Identifier(int i) {
			return GetToken(GrammarParser.Identifier, i);
		}
		public ITerminalNode Assign() { return GetToken(GrammarParser.Assign, 0); }
		public Function_callContext function_call() {
			return GetRuleContext<Function_callContext>(0);
		}
		public ITerminalNode Semi() { return GetToken(GrammarParser.Semi, 0); }
		public ITerminalNode Bool() { return GetToken(GrammarParser.Bool, 0); }
		public ITerminalNode Int() { return GetToken(GrammarParser.Int, 0); }
		public ITerminalNode Double() { return GetToken(GrammarParser.Double, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_assignment);
		try {
			State = 377;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,18,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 353; Match(Identifier);
				State = 354; Match(Assign);
				State = 355; function_call();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 356; Match(Identifier);
				State = 357; Match(Assign);
				State = 358; Match(Identifier);
				State = 359; Match(Semi);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 360; Match(Identifier);
				State = 361; Match(Assign);
				State = 362; Match(Bool);
				State = 363; Match(Semi);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 364; Match(Identifier);
				State = 365; Match(Assign);
				State = 366; Match(Int);
				State = 367; Match(Semi);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 368; Match(Identifier);
				State = 369; Match(Assign);
				State = 370; Match(Double);
				State = 371; Match(Semi);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 372; Match(Identifier);
				State = 373; Match(Assign);
				State = 374; expression(0);
				State = 375; Match(Semi);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParametrsContext : ParserRuleContext {
		public Data_typeContext data_type() {
			return GetRuleContext<Data_typeContext>(0);
		}
		public ITerminalNode Identifier() { return GetToken(GrammarParser.Identifier, 0); }
		public ParametrsContext parametrs() {
			return GetRuleContext<ParametrsContext>(0);
		}
		public ParametrsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parametrs; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterParametrs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitParametrs(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarVisitor<TResult> typedVisitor = visitor as IGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParametrs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParametrsContext parametrs() {
		ParametrsContext _localctx = new ParametrsContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_parametrs);
		try {
			State = 388;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,19,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 379; data_type();
				State = 380; Match(Identifier);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 382; data_type();
				State = 383; Match(Identifier);
				State = 384; Match(T__0);
				State = 385; parametrs();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 20: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 8);

		case 1: return Precpred(_ctx, 7);

		case 2: return Precpred(_ctx, 6);

		case 3: return Precpred(_ctx, 5);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3%\x189\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x5\x3\x42\n\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3"+
		"\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4"+
		"\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x5\x4]\n\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3"+
		"\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5"+
		"\x3\x5\x3\x5\x3\x5\x3\x5\x5\x5s\n\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3"+
		"\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6"+
		"\x5\x6\x86\n\x6\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a"+
		"\x3\a\x5\a\x94\n\a\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\t\x3\t\x3\t\x3\t\x3"+
		"\t\x3\t\x3\t\x3\t\x3\t\x3\t\x5\t\xA6\n\t\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n"+
		"\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x5\n\xB9\n\n\x3"+
		"\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x5\v\xC7\n\v"+
		"\x3\f\x3\f\x5\f\xCB\n\f\x3\r\x3\r\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE"+
		"\x3\xE\x3\xF\x3\xF\x3\xF\x3\xF\x5\xF\xDA\n\xF\x3\x10\x3\x10\x3\x10\x3"+
		"\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x5"+
		"\x10\xE9\n\x10\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11"+
		"\x3\x11\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x5\x12\xFA\n\x12\x3"+
		"\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x14\x3\x14\x3"+
		"\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x15\x3\x15\x3\x15\x3\x15\x3"+
		"\x15\x3\x15\x3\x15\x3\x15\x3\x15\x5\x15\x115\n\x15\x3\x16\x3\x16\x3\x16"+
		"\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x5\x16\x11F\n\x16\x3\x16\x3\x16\x3"+
		"\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\a"+
		"\x16\x12D\n\x16\f\x16\xE\x16\x130\v\x16\x3\x17\x3\x17\x3\x17\x3\x17\x3"+
		"\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3"+
		"\x17\x3\x17\x5\x17\x142\n\x17\x3\x18\x3\x18\x3\x18\x3\x18\x3\x19\x3\x19"+
		"\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19"+
		"\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19"+
		"\x3\x19\x3\x19\x3\x19\x3\x19\x5\x19\x162\n\x19\x3\x1A\x3\x1A\x3\x1A\x3"+
		"\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3"+
		"\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3"+
		"\x1A\x5\x1A\x17C\n\x1A\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B"+
		"\x3\x1B\x3\x1B\x5\x1B\x187\n\x1B\x3\x1B\x2\x2\x3*\x1C\x2\x2\x4\x2\x6\x2"+
		"\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2"+
		"\x1E\x2 \x2\"\x2$\x2&\x2(\x2*\x2,\x2.\x2\x30\x2\x32\x2\x34\x2\x2\x3\x3"+
		"\x2\x15\x17\x1A9\x2\x36\x3\x2\x2\x2\x4\x41\x3\x2\x2\x2\x6\\\x3\x2\x2\x2"+
		"\br\x3\x2\x2\x2\n\x85\x3\x2\x2\x2\f\x93\x3\x2\x2\x2\xE\x95\x3\x2\x2\x2"+
		"\x10\xA5\x3\x2\x2\x2\x12\xB8\x3\x2\x2\x2\x14\xC6\x3\x2\x2\x2\x16\xCA\x3"+
		"\x2\x2\x2\x18\xCC\x3\x2\x2\x2\x1A\xCE\x3\x2\x2\x2\x1C\xD9\x3\x2\x2\x2"+
		"\x1E\xE8\x3\x2\x2\x2 \xEA\x3\x2\x2\x2\"\xF9\x3\x2\x2\x2$\xFB\x3\x2\x2"+
		"\x2&\x103\x3\x2\x2\x2(\x114\x3\x2\x2\x2*\x11E\x3\x2\x2\x2,\x141\x3\x2"+
		"\x2\x2.\x143\x3\x2\x2\x2\x30\x161\x3\x2\x2\x2\x32\x17B\x3\x2\x2\x2\x34"+
		"\x186\x3\x2\x2\x2\x36\x37\a\x1D\x2\x2\x37\x38\a \x2\x2\x38\x39\x5\x4\x3"+
		"\x2\x39:\x5\x14\v\x2:;\x5\x1A\xE\x2;<\a!\x2\x2<\x3\x3\x2\x2\x2=>\x5\x6"+
		"\x4\x2>?\x5\x4\x3\x2?\x42\x3\x2\x2\x2@\x42\x3\x2\x2\x2\x41=\x3\x2\x2\x2"+
		"\x41@\x3\x2\x2\x2\x42\x5\x3\x2\x2\x2\x43]\x5\b\x5\x2\x44\x45\a\x19\x2"+
		"\x2\x45\x46\a\x15\x2\x2\x46G\a$\x2\x2GH\a\x11\x2\x2HI\a\x1F\x2\x2I]\a"+
		"\x10\x2\x2JK\a\x19\x2\x2KL\a\x17\x2\x2LM\a$\x2\x2MN\a\x11\x2\x2NO\a\""+
		"\x2\x2O]\a\x10\x2\x2PQ\a\x19\x2\x2QR\a\x16\x2\x2RS\a$\x2\x2ST\a\x11\x2"+
		"\x2TU\a#\x2\x2U]\a\x10\x2\x2VW\a\x19\x2\x2WX\a\x16\x2\x2XY\a$\x2\x2YZ"+
		"\a\x11\x2\x2Z[\a\"\x2\x2[]\a\x10\x2\x2\\\x43\x3\x2\x2\x2\\\x44\x3\x2\x2"+
		"\x2\\J\x3\x2\x2\x2\\P\x3\x2\x2\x2\\V\x3\x2\x2\x2]\a\x3\x2\x2\x2^_\a\x15"+
		"\x2\x2_`\a$\x2\x2`\x61\a\x11\x2\x2\x61\x62\a\x1F\x2\x2\x62s\a\x10\x2\x2"+
		"\x63\x64\a\x17\x2\x2\x64\x65\a$\x2\x2\x65\x66\a\x11\x2\x2\x66g\a\"\x2"+
		"\x2gs\a\x10\x2\x2hi\a\x16\x2\x2ij\a$\x2\x2jk\a\x11\x2\x2kl\a\"\x2\x2l"+
		"s\a\x10\x2\x2mn\a\x16\x2\x2no\a$\x2\x2op\a\x11\x2\x2pq\a#\x2\x2qs\a\x10"+
		"\x2\x2r^\x3\x2\x2\x2r\x63\x3\x2\x2\x2rh\x3\x2\x2\x2rm\x3\x2\x2\x2s\t\x3"+
		"\x2\x2\x2tu\a\x17\x2\x2uv\a$\x2\x2vw\a\x11\x2\x2wx\x5*\x16\x2xy\a\x10"+
		"\x2\x2y\x86\x3\x2\x2\x2z{\a\x16\x2\x2{|\a$\x2\x2|}\a\x11\x2\x2}~\x5*\x16"+
		"\x2~\x7F\a\x10\x2\x2\x7F\x86\x3\x2\x2\x2\x80\x81\a$\x2\x2\x81\x82\a\x11"+
		"\x2\x2\x82\x83\x5*\x16\x2\x83\x84\a\x10\x2\x2\x84\x86\x3\x2\x2\x2\x85"+
		"t\x3\x2\x2\x2\x85z\x3\x2\x2\x2\x85\x80\x3\x2\x2\x2\x86\v\x3\x2\x2\x2\x87"+
		"\x88\a\x15\x2\x2\x88\x89\a$\x2\x2\x89\x8A\a\x11\x2\x2\x8A\x94\x5\xE\b"+
		"\x2\x8B\x8C\a\x17\x2\x2\x8C\x8D\a$\x2\x2\x8D\x8E\a\x11\x2\x2\x8E\x94\x5"+
		"\xE\b\x2\x8F\x90\a\x16\x2\x2\x90\x91\a$\x2\x2\x91\x92\a\x11\x2\x2\x92"+
		"\x94\x5\xE\b\x2\x93\x87\x3\x2\x2\x2\x93\x8B\x3\x2\x2\x2\x93\x8F\x3\x2"+
		"\x2\x2\x94\r\x3\x2\x2\x2\x95\x96\a$\x2\x2\x96\x97\a\x12\x2\x2\x97\x98"+
		"\x5\x12\n\x2\x98\x99\a\x13\x2\x2\x99\x9A\a\x10\x2\x2\x9A\xF\x3\x2\x2\x2"+
		"\x9B\x9C\x5\b\x5\x2\x9C\x9D\x5\x10\t\x2\x9D\xA6\x3\x2\x2\x2\x9E\x9F\x5"+
		"\f\a\x2\x9F\xA0\x5\x10\t\x2\xA0\xA6\x3\x2\x2\x2\xA1\xA2\x5\n\x6\x2\xA2"+
		"\xA3\x5\x10\t\x2\xA3\xA6\x3\x2\x2\x2\xA4\xA6\x3\x2\x2\x2\xA5\x9B\x3\x2"+
		"\x2\x2\xA5\x9E\x3\x2\x2\x2\xA5\xA1\x3\x2\x2\x2\xA5\xA4\x3\x2\x2\x2\xA6"+
		"\x11\x3\x2\x2\x2\xA7\xB9\a$\x2\x2\xA8\xA9\a$\x2\x2\xA9\xAA\a\x3\x2\x2"+
		"\xAA\xB9\x5\x12\n\x2\xAB\xB9\a\x1F\x2\x2\xAC\xAD\a\x1F\x2\x2\xAD\xAE\a"+
		"\x3\x2\x2\xAE\xB9\x5\x12\n\x2\xAF\xB9\a\"\x2\x2\xB0\xB1\a\"\x2\x2\xB1"+
		"\xB2\a\x3\x2\x2\xB2\xB9\x5\x12\n\x2\xB3\xB9\a#\x2\x2\xB4\xB5\a#\x2\x2"+
		"\xB5\xB6\a\x3\x2\x2\xB6\xB9\x5\x12\n\x2\xB7\xB9\x3\x2\x2\x2\xB8\xA7\x3"+
		"\x2\x2\x2\xB8\xA8\x3\x2\x2\x2\xB8\xAB\x3\x2\x2\x2\xB8\xAC\x3\x2\x2\x2"+
		"\xB8\xAF\x3\x2\x2\x2\xB8\xB0\x3\x2\x2\x2\xB8\xB3\x3\x2\x2\x2\xB8\xB4\x3"+
		"\x2\x2\x2\xB8\xB7\x3\x2\x2\x2\xB9\x13\x3\x2\x2\x2\xBA\xBB\a\x18\x2\x2"+
		"\xBB\xBC\x5\x16\f\x2\xBC\xBD\a$\x2\x2\xBD\xBE\a\x12\x2\x2\xBE\xBF\x5\x34"+
		"\x1B\x2\xBF\xC0\a\x13\x2\x2\xC0\xC1\a \x2\x2\xC1\xC2\x5\x1C\xF\x2\xC2"+
		"\xC3\a!\x2\x2\xC3\xC4\x5\x14\v\x2\xC4\xC7\x3\x2\x2\x2\xC5\xC7\x3\x2\x2"+
		"\x2\xC6\xBA\x3\x2\x2\x2\xC6\xC5\x3\x2\x2\x2\xC7\x15\x3\x2\x2\x2\xC8\xCB"+
		"\x5\x18\r\x2\xC9\xCB\a\x14\x2\x2\xCA\xC8\x3\x2\x2\x2\xCA\xC9\x3\x2\x2"+
		"\x2\xCB\x17\x3\x2\x2\x2\xCC\xCD\t\x2\x2\x2\xCD\x19\x3\x2\x2\x2\xCE\xCF"+
		"\a\x1E\x2\x2\xCF\xD0\a\x12\x2\x2\xD0\xD1\a\x13\x2\x2\xD1\xD2\a \x2\x2"+
		"\xD2\xD3\x5\x1C\xF\x2\xD3\xD4\a!\x2\x2\xD4\x1B\x3\x2\x2\x2\xD5\xD6\x5"+
		"\x10\t\x2\xD6\xD7\x5\x1E\x10\x2\xD7\xDA\x3\x2\x2\x2\xD8\xDA\x3\x2\x2\x2"+
		"\xD9\xD5\x3\x2\x2\x2\xD9\xD8\x3\x2\x2\x2\xDA\x1D\x3\x2\x2\x2\xDB\xDC\x5"+
		"\x32\x1A\x2\xDC\xDD\x5\x1E\x10\x2\xDD\xE9\x3\x2\x2\x2\xDE\xDF\x5 \x11"+
		"\x2\xDF\xE0\x5\x1E\x10\x2\xE0\xE9\x3\x2\x2\x2\xE1\xE2\x5$\x13\x2\xE2\xE3"+
		"\x5\x1E\x10\x2\xE3\xE9\x3\x2\x2\x2\xE4\xE5\x5&\x14\x2\xE5\xE6\x5\x1E\x10"+
		"\x2\xE6\xE9\x3\x2\x2\x2\xE7\xE9\x3\x2\x2\x2\xE8\xDB\x3\x2\x2\x2\xE8\xDE"+
		"\x3\x2\x2\x2\xE8\xE1\x3\x2\x2\x2\xE8\xE4\x3\x2\x2\x2\xE8\xE7\x3\x2\x2"+
		"\x2\xE9\x1F\x3\x2\x2\x2\xEA\xEB\a\x1A\x2\x2\xEB\xEC\a\x12\x2\x2\xEC\xED"+
		"\x5\x30\x19\x2\xED\xEE\a\x13\x2\x2\xEE\xEF\a \x2\x2\xEF\xF0\x5\x1E\x10"+
		"\x2\xF0\xF1\a!\x2\x2\xF1\xF2\x5\"\x12\x2\xF2!\x3\x2\x2\x2\xF3\xF4\a\x1B"+
		"\x2\x2\xF4\xF5\a \x2\x2\xF5\xF6\x5\x1E\x10\x2\xF6\xF7\a!\x2\x2\xF7\xFA"+
		"\x3\x2\x2\x2\xF8\xFA\x3\x2\x2\x2\xF9\xF3\x3\x2\x2\x2\xF9\xF8\x3\x2\x2"+
		"\x2\xFA#\x3\x2\x2\x2\xFB\xFC\a\x4\x2\x2\xFC\xFD\a\x12\x2\x2\xFD\xFE\x5"+
		"\x30\x19\x2\xFE\xFF\a\x13\x2\x2\xFF\x100\a \x2\x2\x100\x101\x5\x1E\x10"+
		"\x2\x101\x102\a!\x2\x2\x102%\x3\x2\x2\x2\x103\x104\a\x5\x2\x2\x104\x105"+
		"\a\x12\x2\x2\x105\x106\x5(\x15\x2\x106\x107\a\x13\x2\x2\x107\x108\a \x2"+
		"\x2\x108\x109\x5\x1E\x10\x2\x109\x10A\a!\x2\x2\x10A\'\x3\x2\x2\x2\x10B"+
		"\x10C\x5\x32\x1A\x2\x10C\x10D\x5\x30\x19\x2\x10D\x10E\a\x10\x2\x2\x10E"+
		"\x10F\x5*\x16\x2\x10F\x115\x3\x2\x2\x2\x110\x111\x5\x32\x1A\x2\x111\x112"+
		"\x5\x30\x19\x2\x112\x113\a\x10\x2\x2\x113\x115\x3\x2\x2\x2\x114\x10B\x3"+
		"\x2\x2\x2\x114\x110\x3\x2\x2\x2\x115)\x3\x2\x2\x2\x116\x117\b\x16\x1\x2"+
		"\x117\x11F\a\"\x2\x2\x118\x11F\a#\x2\x2\x119\x11F\a$\x2\x2\x11A\x11B\a"+
		"\n\x2\x2\x11B\x11C\x5*\x16\x2\x11C\x11D\a\v\x2\x2\x11D\x11F\x3\x2\x2\x2"+
		"\x11E\x116\x3\x2\x2\x2\x11E\x118\x3\x2\x2\x2\x11E\x119\x3\x2\x2\x2\x11E"+
		"\x11A\x3\x2\x2\x2\x11F\x12E\x3\x2\x2\x2\x120\x121\f\n\x2\x2\x121\x122"+
		"\a\x6\x2\x2\x122\x12D\x5*\x16\v\x123\x124\f\t\x2\x2\x124\x125\a\a\x2\x2"+
		"\x125\x12D\x5*\x16\n\x126\x127\f\b\x2\x2\x127\x128\a\b\x2\x2\x128\x12D"+
		"\x5*\x16\t\x129\x12A\f\a\x2\x2\x12A\x12B\a\t\x2\x2\x12B\x12D\x5*\x16\b"+
		"\x12C\x120\x3\x2\x2\x2\x12C\x123\x3\x2\x2\x2\x12C\x126\x3\x2\x2\x2\x12C"+
		"\x129\x3\x2\x2\x2\x12D\x130\x3\x2\x2\x2\x12E\x12C\x3\x2\x2\x2\x12E\x12F"+
		"\x3\x2\x2\x2\x12F+\x3\x2\x2\x2\x130\x12E\x3\x2\x2\x2\x131\x142\a$\x2\x2"+
		"\x132\x142\a\"\x2\x2\x133\x142\a#\x2\x2\x134\x142\a\x1F\x2\x2\x135\x136"+
		"\a\n\x2\x2\x136\x137\a$\x2\x2\x137\x142\a\v\x2\x2\x138\x139\a\n\x2\x2"+
		"\x139\x13A\a\"\x2\x2\x13A\x142\a\v\x2\x2\x13B\x13C\a\n\x2\x2\x13C\x13D"+
		"\a#\x2\x2\x13D\x142\a\v\x2\x2\x13E\x13F\a\n\x2\x2\x13F\x140\a\x1F\x2\x2"+
		"\x140\x142\a\v\x2\x2\x141\x131\x3\x2\x2\x2\x141\x132\x3\x2\x2\x2\x141"+
		"\x133\x3\x2\x2\x2\x141\x134\x3\x2\x2\x2\x141\x135\x3\x2\x2\x2\x141\x138"+
		"\x3\x2\x2\x2\x141\x13B\x3\x2\x2\x2\x141\x13E\x3\x2\x2\x2\x142-\x3\x2\x2"+
		"\x2\x143\x144\x5,\x17\x2\x144\x145\a\x1C\x2\x2\x145\x146\x5,\x17\x2\x146"+
		"/\x3\x2\x2\x2\x147\x162\x5.\x18\x2\x148\x149\x5.\x18\x2\x149\x14A\a\f"+
		"\x2\x2\x14A\x14B\x5\x30\x19\x2\x14B\x162\x3\x2\x2\x2\x14C\x14D\x5.\x18"+
		"\x2\x14D\x14E\a\r\x2\x2\x14E\x14F\x5\x30\x19\x2\x14F\x162\x3\x2\x2\x2"+
		"\x150\x151\a\n\x2\x2\x151\x152\x5\x30\x19\x2\x152\x153\a\v\x2\x2\x153"+
		"\x162\x3\x2\x2\x2\x154\x155\a\n\x2\x2\x155\x156\x5\x30\x19\x2\x156\x157"+
		"\a\v\x2\x2\x157\x158\a\r\x2\x2\x158\x159\x5\x30\x19\x2\x159\x162\x3\x2"+
		"\x2\x2\x15A\x15B\a\n\x2\x2\x15B\x15C\x5\x30\x19\x2\x15C\x15D\a\v\x2\x2"+
		"\x15D\x15E\a\f\x2\x2\x15E\x15F\x5\x30\x19\x2\x15F\x162\x3\x2\x2\x2\x160"+
		"\x162\a\x1F\x2\x2\x161\x147\x3\x2\x2\x2\x161\x148\x3\x2\x2\x2\x161\x14C"+
		"\x3\x2\x2\x2\x161\x150\x3\x2\x2\x2\x161\x154\x3\x2\x2\x2\x161\x15A\x3"+
		"\x2\x2\x2\x161\x160\x3\x2\x2\x2\x162\x31\x3\x2\x2\x2\x163\x164\a$\x2\x2"+
		"\x164\x165\a\x11\x2\x2\x165\x17C\x5\xE\b\x2\x166\x167\a$\x2\x2\x167\x168"+
		"\a\x11\x2\x2\x168\x169\a$\x2\x2\x169\x17C\a\x10\x2\x2\x16A\x16B\a$\x2"+
		"\x2\x16B\x16C\a\x11\x2\x2\x16C\x16D\a\x1F\x2\x2\x16D\x17C\a\x10\x2\x2"+
		"\x16E\x16F\a$\x2\x2\x16F\x170\a\x11\x2\x2\x170\x171\a\"\x2\x2\x171\x17C"+
		"\a\x10\x2\x2\x172\x173\a$\x2\x2\x173\x174\a\x11\x2\x2\x174\x175\a#\x2"+
		"\x2\x175\x17C\a\x10\x2\x2\x176\x177\a$\x2\x2\x177\x178\a\x11\x2\x2\x178"+
		"\x179\x5*\x16\x2\x179\x17A\a\x10\x2\x2\x17A\x17C\x3\x2\x2\x2\x17B\x163"+
		"\x3\x2\x2\x2\x17B\x166\x3\x2\x2\x2\x17B\x16A\x3\x2\x2\x2\x17B\x16E\x3"+
		"\x2\x2\x2\x17B\x172\x3\x2\x2\x2\x17B\x176\x3\x2\x2\x2\x17C\x33\x3\x2\x2"+
		"\x2\x17D\x17E\x5\x18\r\x2\x17E\x17F\a$\x2\x2\x17F\x187\x3\x2\x2\x2\x180"+
		"\x181\x5\x18\r\x2\x181\x182\a$\x2\x2\x182\x183\a\x3\x2\x2\x183\x184\x5"+
		"\x34\x1B\x2\x184\x187\x3\x2\x2\x2\x185\x187\x3\x2\x2\x2\x186\x17D\x3\x2"+
		"\x2\x2\x186\x180\x3\x2\x2\x2\x186\x185\x3\x2\x2\x2\x187\x35\x3\x2\x2\x2"+
		"\x16\x41\\r\x85\x93\xA5\xB8\xC6\xCA\xD9\xE8\xF9\x114\x11E\x12C\x12E\x141"+
		"\x161\x17B\x186";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Happy_language
